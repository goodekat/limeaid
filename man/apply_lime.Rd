% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apply_lime.R
\name{apply_lime}
\alias{apply_lime}
\title{Apply LIME}
\usage{
apply_lime(train, test, model, label, n_features, sim_method, nbins,
  feature_select = "auto", dist_fun = "gower", kernel_width = NULL,
  gower_pow = 1, nreps = 1, seed = NULL)
}
\arguments{
\item{train}{Dataframe of training data featues}

\item{test}{Dataframe of testing data features}

\item{model}{Complex model to be explained}

\item{label}{Vector of response category or categories to use in the explanations}

\item{sim_method}{Vector of methods to use for creating the simulated
data. Options are 'quantile_bins', 'equal_bins', 'kernel_density',
and 'normal_approx'}

\item{nbins}{Vector of number of bins to use with bin based simulation methods}

\item{feature_select}{Feature selection method}

\item{dist_fun}{Distance function}

\item{kernel_width}{Kernel width}

\item{gower_pow}{Power to use when computing the Gower distance}

\item{nreps}{Number of times to apply LIME for each set of input options}

\item{seed}{Seed number if specifying a seed is desired}

\item{nfeatures}{Number of features to return in the explanations}
}
\description{
Applies LIME with the specified tunning parameter options
}
\examples{
# Load packages
library(randomForest)
library(tidyverse)

# Generate the data
l1 <- 0
u1 <- 20
l2 <- -2
u2 <- 2
set.seed(20190913)
sine_data <- tibble(x1 = runif(n = 600, min = l1, max = u1),
x2 = runif(600, min = l2, max = u2)) \%>\%
mutate(y = factor(ifelse(x2 > sin(x1), 1, 0)))

# Separte the data into training and testing parts
sine_data_train <- sine_data[1:500,]
sine_data_test <- sine_data[501:600,]

# Fit a random forest
rfsine <- randomForest(x = sine_data_train \%>\% select(x1, x2),
y = sine_data_train \%>\% pull(y))

# Obtain predictions on the training and testing data
sine_data_train$rfpred <- predict(rfsine)
sine_data_test$rfpred <- predict(rfsine, sine_data_test \%>\% select(x1, x2))

# Apply lime with various input options
sine_lime_explain <- apply_lime(train = sine_data_train \%>\% select(x1, x2),
           test = sine_data_test \%>\% select(x1, x2),
           model = lime::as_classifier(rfsine),
           label = "1",
           n_features = 2,
           sim_method = c('quantile_bins', 'equal_bins', 'kernel_density', 'normal_approx'),
           nbins = 2,
           feature_select = "auto",
           dist_fun = "gower",
           kernel_width = NULL,
           gower_pow = 1,
           nreps = 1,
           seed = 20190914)
}
