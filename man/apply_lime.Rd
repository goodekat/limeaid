% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apply_lime.R
\name{apply_lime}
\alias{apply_lime}
\title{Apply LIME}
\usage{
apply_lime(train, test, model, label, n_features, sim_method, nbins,
  feature_select = "auto", dist_fun = "gower", kernel_width = NULL,
  gower_pow = 1, nreps = 1, seed = NULL)
}
\arguments{
\item{train}{Dataframe of training data featues}

\item{test}{Dataframe of testing data features}

\item{model}{Complex model to be explained}

\item{label}{Vector of response category or categories to use in the explanations}

\item{sim_method}{Vector of methods to use for creating the simulated
data. Options are 'quantile_bins', 'equal_bins', 'kernel_density',
and 'normal_approx'}

\item{nbins}{Vector of number of bins to use with bin based simulation methods}

\item{feature_select}{Feature selection method}

\item{dist_fun}{Distance function}

\item{kernel_width}{Kernel width}

\item{gower_pow}{Power to use when computing the Gower distance}

\item{nreps}{Number of times to apply LIME for each set of input options}

\item{seed}{Seed number if specifying a seed is desired}

\item{nfeatures}{Number of features to return in the explanations}
}
\description{
Applies LIME with the specified tunning parameter options
}
\examples{

library(caret)

# Split up the data set
iris_test <- iris[1:5, 1:4]
iris_train <- iris[-(1:5), 1:4]
iris_lab <- iris[[5]][-(1:5)]

# Create Random Forest model on iris data
model <- train(iris_train, iris_lab, method = 'rf')

iris_lime_explain <- apply_lime(train = iris_train,
                                test = iris_test,
                                model = model,
                                label = "virginica",
                                n_features = 2,
                                sim_method = c('quantile_bins', 'equal_bins', 'kernel_density', 'normal_approx'),
                                nbins = 2,
                                seed = 20190914)
}
