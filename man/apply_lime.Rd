% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main-apply_lime.R
\name{apply_lime}
\alias{apply_lime}
\title{Apply Different Implementations of LIME}
\usage{
apply_lime(train, test, model, sim_method, n_bins, label, n_features,
  n_permutations = 5000, feature_select = "auto", dist_fun = "gower",
  kernel_width = NULL, gower_pow = 1, nreps = 1, seed = NULL)
}
\arguments{
\item{train}{Dataframe of training data features.}

\item{test}{Dataframe of testing data features.}

\item{model}{Complex model to be explained.}

\item{sim_method}{Vector of methods to use for creating the simulated
data. Options are 'quantile_bins', 'equal_bins',
'kernel_density', and 'normal_approx'.}

\item{n_bins}{Vector of number of bins to use with bin based
simulation methods.}

\item{label}{Response category to use in the explanations. Current
implementation only accepts 1 label.}

\item{n_features}{Number of features to return in the explanations.}

\item{n_permutations}{Number of permutations to use when simulating
data for each explanation. Default is 5000.}

\item{feature_select}{Feature selection method. Options are 'auto',
'none', 'forward_selection', 'highest_weights', 'lasso_path',
and 'tree'.}

\item{dist_fun}{Distance function to use when computing weights for
the simulated data. Default is 'gower'. Otherwise,
\code{stats::dist()} will be used.}

\item{kernel_width}{Kernel width to use if \code{dist_fun} is not
'gower'.}

\item{gower_pow}{Power to use when computing the Gower distance.}

\item{nreps}{Number of times to apply LIME for each set of input
options.}

\item{seed}{Number to be used as a seed (if desired).}
}
\description{
Applies LIME with the specified tunning parameter options.
}
\examples{

# Create Random Forest model on the sine data
rfsine <- caret::train(x = sine_data_train[c("x1", "x2", "x3")],
                       y = sine_data_train$y,
                       method = "rf")

# Apply lime
sine_lime_explain <-
   apply_lime(train = sine_data_train[c("x1", "x2", "x3")],
              test = sine_data_test[c("x1", "x2", "x3")],
              model = rfsine,
              label = "1",
              n_features = 2,
              sim_method = c('quantile_bins', 'kernel_density'),
              n_bins = c(3, 4),
              seed = 20190914)
}
